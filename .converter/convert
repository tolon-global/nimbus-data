#!/usr/bin/env coffee
fs = require 'fs'
glob = require 'glob'
cson = require 'cson'
EJSON = require 'ejson'
deepmerge = require 'deepmerge'

sources = []
rawdata = {}
data =
    cards: {}
    processes: {}
    tools: {}
    parts: {}
    assets:
        videos: []

g = glob "**/*.cson", (e,f) ->
    sources = f

    for source in sources
        rawdata[source.replace(/\.cson$/,'')] = cson.load source

    for filename, file of rawdata
        for innername, fragment of file.cards
            data.cards["#{filename}/#{innername}"] = fragment

        for innername, fragment of file.processes
            data.processes["#{filename}/#{innername}"] = fragment

        data.tools = file.tools if filename is 'tools'
        data.parts = file.parts if filename is 'parts'

    for uri, card of data.cards
        expand_links uri, card
        embed_processes uri, card
        apply_templates uri, card
        expand_assets uri, card
        identify_videos uri, card
        secondify_timecodes uri, card
        console.log uri

    data.assets.videos = unique data.assets.videos

    fs.writeFile "data.json", EJSON.stringify data.cards, {indent: true}
    console.log "#{Object.keys(data.cards).length} cards written"
    # fs.writeFile "data-debug.json", EJSON.stringify data, {indent: true}
    fs.writeFile "assets.json", EJSON.stringify data.assets, {indent: true}

expand_links = (uri, card) ->
    defaults = {positive: "Yes", negative: "No"}
    for answer in ['positive', 'negative']
        switch typeof card[answer]
            when 'string'
                card[answer] =
                    label: defaults[answer]
                    target: mesh_uri uri, card[answer]
            when 'object'
                card[answer].label ?= defaults[answer]
                break unless card[answer].target
                card[answer].target = mesh_uri uri, card[answer].target
    if card.options?
        for option in card.options
            option.target = mesh_uri uri, option.target

embed_processes = (uri, card) ->
    return unless card.processes?
    for proc, i in card.processes
        if typeof proc is 'string'
            continue if proc is "$template"
            full_uri = mesh_uri uri, proc
            card.processes[i] = data.processes[full_uri] || full_uri
            card.processes[i].source = full_uri

apply_templates = (uri, card) ->
    return unless card.template?
    template_uri = mesh_uri uri, card.template
    if card.processes?
        for proc, i in card.processes
            if proc is "$template"
                template_procs = data.cards[template_uri].processes
                card.processes.splice i, 1, template_procs...

    merged_card = deepmerge data.cards[template_uri], card
    data.cards[uri] = merged_card

expand_assets = (uri, card) ->
    return unless card.processes?
    for proc in card.processes
        for asset_type in ['tools', 'parts']
            continue unless proc[asset_type]?
            proc[asset_type] = proc[asset_type].map (asset) ->
                if asset.match /^(\w|[\/-])+$/
                    data[asset_type][asset]
                else
                    asset

mesh_uri = (context, local) ->
    return local if local.match /^\$\w+/ # do not expand $variables
    context_fragments = context.split '/'
    local_fragments = local.split '/'
    [context_fragments[0...-local_fragments.length]..., local_fragments...].join '/'

identify_videos = (uri, card) ->
    return unless card.processes?
    for proc in card.processes
        data.assets.videos.push proc.video if proc.video?

secondify_timecodes = (uri, card) ->
    return unless card.processes?

    for proc in card.processes
        continue unless proc.steps? and proc.steps.constructor is Object
        for timecode, subtitle of proc.steps when match = timecode.match /(\d\d):(\d\d)\.(\d\d)/
            [minutes, seconds, miliseconds] = match[1..3].map(Number)
            s = minutes*60 + seconds
            ms = ("00" + miliseconds)[-2..]
            proc.steps["#{s}.#{ms}"] = subtitle
            delete proc.steps[timecode]

unique = (array) ->
    hash = {}
    hash[e] = e for e in array
    (key for key, value of hash)
